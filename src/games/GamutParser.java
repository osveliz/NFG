package games;

import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * Class for reading a game from a file in the Gamut "SimpleOutput" format
 */

public class GamutParser {

  // empty constructor
  private GamutParser() {
  }

  /**
   * Read in a game specification, given the file name
   * @param fileName the gamut file
   * @return the game
   */
  public static MatrixGame readGamutGame(String fileName) {
    File inputFile = new File(fileName);
    MatrixGame g;
    try {
      g = parseGame(new Scanner(inputFile));
    } catch (IOException e) {
      throw new RuntimeException("Error reading gamut game from file: " + e.getMessage());
    }
     return g;
  }

  /**
   * Read in a game specification, given a scanner
   * @param s a scanner
   * @return the game
   */
  public static MatrixGame parseGame(Scanner s) {
    s.useDelimiter("[\\s\\[\\]]+");

    // skip "generated by..." line
    s.nextLine();

    // This is the game description; chop off the comment character
    String str = s.nextLine();
    String description = str.substring(2);

    // skip to the players line and record the number of players
    while (s.hasNext()) {
      if (s.next().equals("Players:")) break;
    }
    int numPlayers = s.nextInt();

    // skip to the actions line and record the number of actions
    while (s.hasNext()) {
      if (s.next().equals("Actions:")) break;
    }
    int[] numActions = new int[numPlayers];
    for (int i = 0; i < numPlayers; i++) {
      numActions[i] = s.nextInt();
    }

    // Now that we know the size of the game, we can create one.
    MatrixGame g = new MatrixGame(numPlayers, numActions);
    g.setDescription(description);

    // skip to the next line
    s.nextLine();

    // skip past all remaining comments
    while (s.findInLine("#") != null) {
      s.nextLine();
    }

    // parse a line for the profile and payoffs
    int[] outcome = new int[numPlayers];
    double[] payoffs = new double[numPlayers];
    while (true) {

      // parse the outcome
      while (!s.hasNextInt()) {
        s.next();
      }

      for (int i = 0; i < numPlayers; i++) {
        outcome[i] = s.nextInt();
      }

      // parse the payoffs
      while (!s.hasNextDouble()) {
        s.next();
      }

      for (int i = 0; i < numPlayers; i++) {
        payoffs[i] = s.nextDouble();
      }

      g.setPayoffs(outcome, payoffs);

      // move on to the next line if there is one
      if (s.hasNextLine()) {
        s.nextLine();
        Arrays.fill(outcome, 0);
        Arrays.fill(payoffs, 0d);
      } else {
        break;
      }

      // end of file
      if (!s.hasNext()) break;
    }
    s.close();
    return g;
  }
}
